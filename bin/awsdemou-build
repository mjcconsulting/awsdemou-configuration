#!/bin/bash
#
# Simple script to build the AWS Demo University Account
#
# This script depends on jp, the JMESPath binary, download from:
# - Releases; https://github.com/jmespath/jp/releases
# - MacOS: https://github.com/jmespath/jp/releases/download/0.1.3/jp-darwin-amd64
# - Linux: https://github.com/jmespath/jp/releases/download/0.1.3/jp-linux-amd64
# - Windows: https://github.com/jmespath/jp/releases/download/0.1.3/jp-windows-amd64
#
# TODO: Current bugs in this script
# - The section which extracts parameters from the stack_config can't handle values with embedded spaces
# - The test for creating or updating a stack needs to check stack status for prior failures

#  1. Initalize Environment
updates=0

company=AWSDemoUniversity

organization=${CAMELZ_ORGANIZATION:-mjcconsulting}
templates_dir=${CAMELZ_TEMPLATES:-$HOME/src/$organization/camelz-templates}
functions_dir=${CAMELZ_FUNCTIONS:-$HOME/src/$organization/camelz-functions}
documents_dir=${CAMELZ_SCRIPTS:-$HOME/src/$organization/camelz-documents}
components_dir=${CAMELZ_COMPONENTS:-$HOME/src/$organization/camelz-components}
scripts_dir=${CAMELZ_SCRIPTS:-$HOME/src/$organization/camelz-scripts}
installers_dir=${CAMELZ_INSTALLERS:-$HOME/src/$organization/camelz-installers}
configuration_dir=${AWSDEMOU_CONFIG:-$HOME/src/$organization/awsdemou-configuration}

region=${AWS_DEFAULT_REGION:-us-east-1}
account=${AWS_ACCOUNT_ALIAS:-awsdemou}
user=${AWS_USER_NAME:-bootstrapadministrator}

timestamp=$(date +%Y%M%d-%H%M%S)

buckets=0
sync=1


#  2. Define functions

usage () {
  echo "Usage: ${BASH_SOURCE##*/} [-u]"
  echo "              [-T path] [-F path] [-D path] [-C path] [-S path] [-I path] [-c path]"
  echo "              [-r region] [-a account] [-u user]"
  echo "  -u          Update Existing Stacks"
  echo "  -T path     Path to camelz-templates repo (default: $templates_dir)"
  echo "  -F path     Path to camelz-functions repo (default: $functions_dir)"
  echo "  -D path     Path to camelz-documents repo (default: $documents_dir)"
  echo "  -C path     Path to camelz-components repo (default: $components_dir)"
  echo "  -S path     Path to camelz-scripts repo (default: $scripts_dir)"
  echo "  -I path     Path to camelz-installers repo (default: $installers_dir)"
  echo "  -c path     Path to awsdemou-configuration repo (default: $configuration_dir)"
  echo "  -r region   Region (default: $region)"
  echo "  -a account  Account Alias (default: $account)"
  echo "  -u user     User (default: $user)"
}

#  3. Parse command line options

while getopts uT:F:D:C:S:I:c:r:a:u:? arg; do
  case $arg in
  u)  updates=1;;
  T)  templates_dir="$OPTARG";;
  F)  functions_dir="$OPTARG";;
  D)  documents_dir="$OPTARG";;
  C)  components_dir="$OPTARG";;
  S)  scripts_dir="$OPTARG";;
  I)  installers_dir="$OPTARG";;
  c)  configuration_dir="$OPTARG";;
  r)  region="$OPTARG";;
  a)  account="$OPTARG";;
  u)  user="$OPTARG";;
  ?)  usage
      exit;;
  esac
done

shift $(($OPTIND - 1))


#  4. Validate environment

if [ -z "$templates_dir" ]; then
  echo "-T path missing!"
  echo "Could not automatically determine templates path, and it was not specified as a parameter"
  exit 10
elif [ ! -d "$templates_dir" ]; then
  echo "-T $templates_dir not a directory: Please specify a valid directory"
  exit 11
elif [ ! -f "$templates_dir/README.md" ]; then
  echo "-T $templates_dir does not appear to be a valid clone of camelz-templates, missing README.md file"
  exit 12
elif ! grep -s -q "# CaMeLz Templates" "$templates_dir/README.md" ; then
  echo "-T $templates_dir does not appear to be a valid clone of camelz-templates, README.md title incorrect"
  exit 13
elif [ ! -d "$templates_dir/bucket" ]; then
  echo "-T $templates_dir appears valid, but content has not yet been published to the ./bucket subdirectory"
  exit 14
fi

if [ -z "$functions_dir" ]; then
  echo "-F path missing!"
  echo "Could not automatically determine functions path, and it was not specified as a parameter"
  exit 20
elif [ ! -d "$functions_dir" ]; then
  echo "-F $functions_dir not a directory: Please specify a valid directory"
  exit 21
elif [ ! -f "$functions_dir/README.md" ]; then
  echo "-F $functions_dir does not appear to be a valid clone of camelz-functions, missing README.md file"
  exit 22
elif ! grep -s -q "# CaMeLz Functions" "$functions_dir/README.md" ; then
  echo "-F $functions_dir does not appear to be a valid clone of camelz-functions, README.md title incorrect"
  exit 23
elif [ ! -d "$functions_dir/bucket" ]; then
  echo "-F $functions_dir appears valid, but content has not yet been published to the ./bucket subdirectory"
  exit 24
fi

if [ -z "$documents_dir" ]; then
  echo "-D path missing!"
  echo "Could not automatically determine documents path, and it was not specified as a parameter"
  exit 30
elif [ ! -d "$documents_dir" ]; then
  echo "-D $documents_dir not a directory: Please specify a valid directory"
  exit 31
elif [ ! -f "$documents_dir/README.md" ]; then
  echo "-D $documents_dir does not appear to be a valid clone of camelz-documents, missing README.md file"
  exit 32
elif ! grep -s -q "# CaMeLz Documents" "$documents_dir/README.md" ; then
  echo "-D $documents_dir does not appear to be a valid clone of camelz-documents, README.md title incorrect"
  exit 33
elif [ ! -d "$documents_dir/bucket" ]; then
  echo "-D $documents_dir appears valid, but content has not yet been published to the ./bucket subdirectory"
  exit 34
fi

if [ -z "$components_dir" ]; then
  echo "-C path missing!"
  echo "Could not automatically determine components path, and it was not specified as a parameter"
  exit 40
elif [ ! -d "$components_dir" ]; then
  echo "-C $components_dir not a directory: Please specify a valid directory"
  exit 41
elif [ ! -f "$components_dir/README.md" ]; then
  echo "-C $components_dir does not appear to be a valid clone of camelz-components, missing README.md file"
  exit 42
elif ! grep -s -q "# CaMeLz Components" "$components_dir/README.md" ; then
  echo "-C $components_dir does not appear to be a valid clone of camelz-components, README.md title incorrect"
  exit 43
elif [ ! -d "$components_dir/bucket" ]; then
  echo "-C $components_dir appears valid, but content has not yet been published to the ./bucket subdirectory"
  exit 44
fi

if [ -z "$scripts_dir" ]; then
  echo "-S path missing!"
  echo "Could not automatically determine scripts path, and it was not specified as a parameter"
  exit 50
elif [ ! -d "$scripts_dir" ]; then
  echo "-S $scripts_dir not a directory: Please specify a valid directory"
  exit 51
elif [ ! -f "$scripts_dir/README.md" ]; then
  echo "-S $scripts_dir does not appear to be a valid clone of camelz-scripts, missing README.md file"
  exit 52
elif ! grep -s -q "# CaMeLz Scripts" "$scripts_dir/README.md" ; then
  echo "-S $scripts_dir does not appear to be a valid clone of camelz-scripts, README.md title incorrect"
  exit 53
elif [ ! -d "$scripts_dir/bucket" ]; then
  echo "-S $scripts_dir appears valid, but content has not yet been published to the ./bucket subdirectory"
  exit 54
fi

if [ -z "$installers_dir" ]; then
  echo "-I path missing!"
  echo "Could not automatically determine installers path, and it was not specified as a parameter"
  exit 60
elif [ ! -d "$installers_dir" ]; then
  echo "-I $installers_dir not a directory: Please specify a valid directory"
  exit 61
elif [ ! -f "$installers_dir/README.md" ]; then
  echo "-I $installers_dir does not appear to be a valid clone of camelz-installers, missing README.md file"
  exit 62
elif ! grep -s -q "# CaMeLz Installers" "$installers_dir/README.md" ; then
  echo "-I $installers_dir does not appear to be a valid clone of camelz-installers, README.md title incorrect"
  exit 63
elif [ ! -d "$installers_dir/bucket" ]; then
  echo "-I $installers_dir appears valid, but content has not yet been published to the ./bucket subdirectory"
  exit 64
fi

if [ -z "$configuration_dir" ]; then
  echo "-c path missing!"
  echo "Could not automatically determine configuration path, and it was not specified as a parameter"
  exit 70
elif [ ! -d "$configuration_dir" ]; then
  echo "-c $configuration_dir not a directory: Please specify a valid directory"
  exit 71
elif [ ! -f "$configuration_dir/README.md" ]; then
  echo "-c $configuration_dir does not appear to be a valid clone of a camelz configuration repo, missing README.md file"
  exit 72
elif ! grep -s -q "Cross-Account Multi-Environment Landing Zones Framework Configuration" "$configuration_dir/README.md" ; then
  echo "-c $configuration_dir does not appear to be a valid clone of a camelz configuration repo, README.md missing expected reference"
  exit 73
fi

if [ -z "$region" ]; then
    echo "-r region missing!"
    echo "Could not automatically determine region, and it was not specified as a parameter"
    exit 80
else
    case $region in
      us-east-1|us-east-2|us-west-2)
        ;;
      *)
        echo "-r $region invalid: Please specify a valid region (us-east-1, us-east-2 r us-west-2)"
        exit 81;;
    esac
fi

if [ -z "$account" ]; then
    echo "-a account missing!"
    echo "Could not automatically determine account alias, and it was not specified as a parameter"
    exit 82
else
    case $account in
      awsdemou)
        account_name=Jumpstart
        account_id=692874983914
        ;;
      *)
        echo "-a $account invalid! Must be awsdemou"
        exit 83;;
    esac
fi

if [ -z "$user" ]; then
    echo "-u user missing!"
    echo "Could not automatically determine user, and it was not specified as a parameter"
    exit 86
fi

profile=$account-$user

if ! grep -s -q "\[profile $profile]" ~/.aws/config; then
    echo "Could not find ($account) Account ($user) User AWSCLI profile!"
    echo "Expected to find: [profile $profile] in ~/.aws/config"
    exit 88
fi

if [ ! -f "$configuration_dir/conf/$company/$account_name/$account_id/$region/Stacks.dat" ]; then
  echo "Could not find $configuration_dir/conf/$company/$account_name/$account_id/$region/Stacks.dat data file"
  exit 90
fi

# Prevent certain environment variables from breaking commands
unset AWS_PROFILE
unset AWS_DEFAULT_PROFILE
unset AWS_CREDENTIAL_FILE
unset EC2_PRIVATE_KEY
unset EC2_CERT


#  5. Check Buckets

templates_bucket=templates-$account-$region
functions_bucket=functions-$account-$region
documents_bucket=documents-$account-$region
components_bucket=components-$account-$region
scripts_bucket=scripts-$account-$region
installers_bucket=installers-$account-$region

echo "Checking Buckets..."

echo -n "- $templates_bucket Bucket... "
if ! aws s3api head-bucket --bucket $templates_bucket \
                           --profile $profile --region $region &> /dev/null; then
  echo "does not exist"
else
  echo "exists"
  buckets=1
fi

echo -n "- $functions_bucket Bucket... "
if ! aws s3api head-bucket --bucket $functions_bucket \
                           --profile $profile --region $region &> /dev/null; then
  echo "does not exist"
else
  echo "exists"
fi

echo -n "- $documents_bucket Bucket... "
if ! aws s3api head-bucket --bucket $documents_bucket \
                           --profile $profile --region $region &> /dev/null; then
  echo "does not exist"
else
  echo "exists"
fi

echo -n "- $components_bucket Bucket... "
if ! aws s3api head-bucket --bucket $components_bucket \
                           --profile $profile --region $region &> /dev/null; then
  echo "does not exist"
else
  echo "exists"
fi

echo -n "- $scripts_bucket Bucket... "
if ! aws s3api head-bucket --bucket $scripts_bucket \
                           --profile $profile --region $region &> /dev/null; then
  echo "does not exist"
else
  echo "exists"
fi

echo -n "- $installers_bucket Bucket... "
if ! aws s3api head-bucket --bucket $installers_bucket \
                           --profile $profile --region $region &> /dev/null; then
  echo "does not exist"
else
  echo "exists"
fi


#  6. Create Stacks

echo "Creating Stacks..."

stacks=$(sed -e '/^#/d;/^ *$/d' $configuration_dir/conf/$company/$account_name/$account_id/$region/Stacks.dat)

for stack_tuple in $stacks; do
  stack_name=${stack_tuple%%:*}; stack_tuple=${stack_tuple#*:}
  template=${stack_tuple%%:*}; stack_tuple=${stack_tuple#*:}
  process=${stack_tuple%%:*}
  [[ "$process" =~ ^(1|y|Y).*$ ]] && process=1 || process=0

  stack_config=$configuration_dir/conf/$company/$account_name/$account_id/$region/$stack_name.Configuration.json
  stack_template=$templates_dir/src/$template

  if [ ! -f $stack_config ]; then
    echo "Stack configuration file $stack_config missing!"
    exit 100
  fi
  if [ ! -f $stack_template ]; then
    echo "Template file $stack_template missing!"
    exit 110
  fi

  # Extract information from Template file
  # - Determine what capability might be needed
  if egrep -q 'Type: *AWS::IAM::(ManagedPolicy|Role|Group|User)' $stack_template; then
    if egrep -q ' (ManagedPolicy|Role|Group|User)Name:' $stack_template; then
      capability=CAPABILITY_NAMED_IAM
    else
      capability=CAPABILITY_IAM
    fi
  else
    unset capability
  fi

  # - Determine if we need to find and override a Parameter S3 Key
  #   - This depends on the convention:
  #     - All Lambda LayerVersions have Parameters which end with "LayerS3Key"
  #     - All Lambda Functions have Parameters which end with "FunctionS3Key"
  #     - All Systems Manager Documents have Parameters which end with"DocumentS3Key"
  #     - All ImageBuilder Components have Parameters which end with "ComponentS3Key"
  #   - This logic will then extract such ParameterKeys, then search for the most recent S3 Key and
  #     use this in additional Parameters to be supplied to the stack deploy operation
  layers=$(sed -n -e 's/^ *\([A-Za-z0-9]*\)LayerS3Key:.*$/\1/p' $stack_template | sort | uniq)
  functions=$(sed -n -e 's/^ *\([A-Za-z0-9]*\)FunctionS3Key:.*$/\1/p' $stack_template | sort | uniq)
  documents=$(sed -n -e 's/^ *\([A-Za-z0-9]*\)DocumentS3Key:.*$/\1/p' $stack_template | sort | uniq)
  components=$(sed -n -e 's/^ *\([A-Za-z0-9]*\)ComponentS3Key:.*$/\1/p' $stack_template | sort | uniq)

  # Extract information from Configuration file
  # - TODO: Figure out a way to do these transformations purely with jp expressions
  parameters=$(jp -f $stack_config 'Parameters' | sed -n -e 's/^ *"\([^"]*\)": *"\([^"]*\)".*$/\1=\2/p' | tr '\n' ' ')
  tags=$(jp -f $stack_config 'Tags' | sed -n -e 's/^ *"\([^"]*\)": *"\([^"]*\)".*$/\1=\2/p' | tr '\n' ' ')
  statement=$(jp -f $stack_config 'Statement')

  # Construct Deploy Statement
  statement="aws cloudformation deploy --stack-name $stack_name \\"$'\n'
  statement+="                          --template $stack_template \\"$'\n'
  if [ $buckets = 1 ]; then
    statement+="                          --s3-bucket $templates_bucket \\"$'\n'
    statement+="                          --s3-prefix ${template%.*} \\"$'\n'
  fi

  first_parameter=1
  if [ -n "$parameters" ]; then
    for parameter in $parameters; do
      if [ $first_parameter = 1 ]; then
        statement+="                          --parameter-overrides $parameter \\"$'\n'
        first_parameter=0
      else
        statement+="                                                $parameter \\"$'\n'
      fi
    done
  fi

  if [ -n "$layers" ]; then
    for layer in $layers; do
      key=$( (cd $functions_dir/bucket; ls -1t ${layer}Layer/*.zip | head -1) )
      parameter="${layer}LayerS3Key=$key"
      if [ $first_parameter = 1 ]; then
        statement+="                          --parameter-overrides $parameter \\"$'\n'
        first_parameter=0
      else
        statement+="                                                $parameter \\"$'\n'
      fi
    done
  fi

  if [ -n "$functions" ]; then
    for function in $functions; do
      key=$( (cd $functions_dir/bucket; ls -1t ${function}/*.zip | head -1) )
      parameter="${function}FunctionS3Key=$key"
      if [ $first_parameter = 1 ]; then
        statement+="                          --parameter-overrides $parameter \\"$'\n'
        first_parameter=0
      else
        statement+="                                                $parameter \\"$'\n'
      fi
    done
  fi

  if [ -n "$documents" ]; then
    for document in $documents; do
      key=$( (cd $documents_dir/bucket; ls -1t ${document}/*.{yaml,json} | head -1) )
      parameter="${document}DocumentS3Key=$key"
      if [ $first_parameter = 1 ]; then
        statement+="                          --parameter-overrides $parameter \\"$'\n'
        first_parameter=0
      else
        statement+="                                                $parameter \\"$'\n'
      fi
    done
  fi

  if [ -n "$components" ]; then
    for component in $components; do
      key=$( (cd $components_dir/bucket; ls -1t ${component}/*.{yaml,json} | head -1) )
      parameter="${component}ComponentS3Key=$key"
      if [ $first_parameter = 1 ]; then
        statement+="                          --parameter-overrides $parameter \\"$'\n'
        first_parameter=0
      else
        statement+="                                                $parameter \\"$'\n'
      fi
    done
  fi

  if [ -n "$capability" ]; then
    statement+="                          --capabilities $capability \\"$'\n'
  fi

  if [ -n "$tags" ]; then
    first=1
    for tag in $tags; do
      if [ $first = 1 ]; then
        statement+="                          --tags $tag \\"$'\n'
        first=0
      else
        statement+="                                 $tag \\"$'\n'
      fi
    done
  fi

  if aws cloudformation describe-stacks --stack-name $stack_name \
                                        --profile $profile --region $region --output text &> /dev/null; then
    statement+="                          --no-fail-on-empty-changeset \\"$'\n'
    stack_exists=1
  else
    statement+="                          --fail-on-empty-changeset \\"$'\n'
    stack_exists=0
  fi

  statement+="                          --profile $profile --region $region"
  eval_statement="${statement//\\$'\n'}"

  echo
  echo "$statement"

  if [ $stack_exists = 0 ]; then
    echo -n "Create[Y/n/q]?"
    read answer
  elif [ $updates = 1 ]; then
    echo -n "Update[Y/n/q]?"
    read answer
  else
    echo "Update Skipped"
    answer=n
  fi

  if [[ $answer =~ (^$|^(y|Y|yes|Yes)$) ]]; then
    eval "$eval_statement"
    rc=$?

    if [ $rc = 0 ]; then
      if [ $stack_name = "Buckets" ]; then
        buckets=1

        # Sync Buckets
        if [ $sync -ge 1 ]; then
          echo
          echo "Syncing Buckets..."
          echo "- $templates_bucket"
          aws s3 sync $templates_dir/bucket \
                      s3://$templates_bucket \
                      --exclude '*' \
                      --include '*/*.template' \
                      --profile $profile --region $region --output table

          echo "- $functions_bucket"
          aws s3 sync $functions_dir/bucket \
                      s3://$functions_bucket \
                      --exclude '*' \
                      --include '*/*.zip' \
                      --profile $profile --region $region --output table

          echo "- $documents_bucket"
          aws s3 sync $documents_dir/bucket \
                      s3://$documents_bucket \
                      --exclude '*' \
                      --include '*/*.yaml' \
                      --include '*/*.json' \
                      --profile $profile --region $region --output table

          echo "- $components_bucket"
          aws s3 sync $components_dir/bucket \
                      s3://$components_bucket \
                      --exclude '*' \
                      --include '*/*.yaml' \
                      --include '*/*.json' \
                      --profile $profile --region $region --output table

          echo "- $scripts_bucket"
          aws s3 sync $scripts_dir/bucket \
                      s3://$scripts_bucket \
                      --profile $profile --region $region --output table

          echo "- $installers_bucket"
          aws s3 sync $installers_dir/bucket \
                      s3://$installers_bucket \
                      --profile $profile --region $region --output table
          sync=0
        fi
      fi
    else
      echo -n "Continue[y/N/q]?"
      read answer
      if [[ ! $answer =~ ^(y|Y|yes|Yes)$ ]]; then
        exit
      fi
    fi
  elif [[ $answer =~ ^(q|Q|quit|Quit)$ ]]; then
    exit
  fi
done

exit

# Save below here
    # Construct Stack Policy Statement. Since deploy doesn't support this, we would have to add this separately
    if [ -n "$statement" ]; then
      stack_policy_body="{ "Statement" : $(echo $statement) }"
    else
      unset stack_policy_body
    fi
